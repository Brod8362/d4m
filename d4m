#!/usr/bin/env python3
from ast import Mod
from click import option
import vdf
import os
import toml
from sys import platform
from divamod import DivaMod, DivaSimpleMod
import colorama
from manage import ModManager, load_mods
from simple_term_menu import TerminalMenu
import api

MEGAMIX_APPID = 1761390
LIBRARYFOLDERS_VDF_PATH = os.path.expanduser("~/.local/share/Steam/config/libraryfolders.vdf")

if platform != "linux":
    print("this mod manager is only supported on linux")
    quit()

if not os.path.isfile(LIBRARYFOLDERS_VDF_PATH):
    print("cannot find libraryfolders.vdf")
    quit()

MEGAMIX_PATH = None

with open(LIBRARYFOLDERS_VDF_PATH) as vdf_fd:
    data = vdf.parse(vdf_fd)
    for library_index in data["libraryfolders"]:
        library_folder = data["libraryfolders"][library_index]
        if str(MEGAMIX_APPID) in library_folder["apps"] and MEGAMIX_PATH == None:
            MEGAMIX_PATH = os.path.join(library_folder['path'], "steamapps/common/Hatsune Miku Project DIVA Mega Mix Plus/")

if MEGAMIX_PATH == None:
    print("couldn't find megamix install directory, is it installed?")
    quit()

if not os.path.isfile(os.path.join(MEGAMIX_PATH, "config.toml")):
    print("couldn't find config.toml in megamix root, is DivaModLoader installed?")
    quit()

with open(os.path.join(MEGAMIX_PATH, "config.toml")) as conf_fd:
    config = toml.load(conf_fd)
    ENABLED_MODS_PATH = MEGAMIX_PATH + config["mods"]
    DISABLED_MODS_PATH = MEGAMIX_PATH + config.get("disabled_mods", "disabled_mods")

for d in [ENABLED_MODS_PATH, DISABLED_MODS_PATH]:
    os.makedirs(d, exist_ok=True)

def generate_preview(mod_str: str, mod_manager: ModManager):
    content = []
    found = list(filter(lambda x: str(x) == mod_str, mod_manager.mods()))
    if not found:
        return ""
    mod = found[0]
    content.append(f"Name: {mod.name}")
    content.append(f"Author: {mod.author}")
    content.append(f"Version: {mod.version}")
    enable_str = f"{colorama.Fore.GREEN}Enabled{colorama.Fore.RESET}" if mod_manager.is_enabled(mod) else f"{colorama.Fore.RED}Disabled{colorama.Fore.RESET}"
    content.append(f"Status: {enable_str}")
    content.append(f"Install Path: {mod.path}")
    if mod.is_simple() == False:
        content.append(f"Mod ID: {mod.id}")
        if mod_manager.is_enabled(mod):
            utd_str = f"{colorama.Fore.YELLOW}Out of date{colorama.Fore.RESET}" if mod.is_out_of_date() else f"{colorama.Fore.GREEN}Up to date{colorama.Fore.RESET}"
            content.append(f"Update Status: {utd_str}")
    return "\n".join(content)

def menu_install(mod_manager: ModManager):
    search_str = input("Search for a mod...:")
    found_mods = api.search_mods(search_str)
    installed_ids = [mod.id for mod in mod_manager.mods()]
    if not found_mods:
        print(f"No mods matching {colorama.Style.BRIGHT}{search_str}{colorama.Style.RESET_ALL} found.")
    else:
        options = ["Cancel"]
        def mod_str_gen(m_t):
            content = m_t[1].strip().replace("\n", "")
            if m_t[0] in installed_ids:
                return f"(installed) {content}"
            return content

        options.extend(map(mod_str_gen, found_mods))
        mod_search_menu = TerminalMenu(options)
        choice = mod_search_menu.show()
        if 0 < choice < len(options):
            mod = found_mods[choice-1]
            if mod[0] in installed_ids:
                print(f"{mod[1]} is already installed.")
            else:
                print(f"Installing {mod[1]} ({mod[0]})")
                mod_manager.install_mod(mod[0])
                print(f"{colorama.Fore.GREEN}Installed {mod[1]}{colorama.Fore.RESET}")

def menu_manage(mod_manager: ModManager):
    options = ["Cancel"]
    options.extend(str(mod) for mod in mod_manager.mods())
    menu = TerminalMenu(options, preview_command=lambda x: generate_preview(x, mod_manager), preview_title="Mod Info", preview_size=0.4)
    choice = menu.show()
    if 0 < choice < len(
        options):
        selected_mod = mod_manager.mods()[choice-1]
        mod_is_enabled = mod_manager.is_enabled(selected_mod)
        inner_options = [
            "Cancel",
            "[d] Disable" if mod_is_enabled else "[e] Enable",
            "(update unavailable)" if selected_mod.is_simple() else "[u] Update",
            "[x] Delete",
        ]
        inner_menu = TerminalMenu(inner_options, title=str(selected_mod))
        inner_choice = inner_menu.show()
        match inner_choice:
            case 0:
                pass
            case 1:
                if mod_is_enabled:
                    mod_manager.disable(selected_mod)
                    print(f"{selected_mod} {colorama.Fore.RED}disabled.{colorama.Fore.RESET}")
                else:
                    mod_manager.enable(selected_mod)
                    print(f"{selected_mod} {colorama.Fore.GREEN}enabled.{colorama.Fore.RESET}")
            case 2:
                if selected_mod.is_simple():
                    print("This mod has an unknown origin and thus cannot be auto-updated. Try deleting it and reinstalling it using d4m.")
                else:
                    if selected_mod.is_out_of_date():
                        #TODO: delete old mod
                        #mod_manager.install_mod(selected_mod.id)
                        print(f"funny update function goes here")
                    else:
                        print(f"{selected_mod.name} is up-to-date.")
            case 3:
                check_opt = TerminalMenu(["Cancel", f"Yes, delete {selected_mod.name}"], title=f"Are you sure you want to delete {selected_mod}?").show()
                if check_opt == 1:
                    mod_manager.delete_mod(selected_mod)
                    print(f"{colorama.Fore.RED}{selected_mod} deleted.{colorama.Fore.RESET}")

def menu_exit(mod_manager: ModManager):
    quit()

mod_manager = ModManager(ENABLED_MODS_PATH, DISABLED_MODS_PATH)

print("d4m v0.0")
print(f"{len(mod_manager.mods())} mods installed")
print(f"{colorama.Fore.YELLOW}Checking for updates...{colorama.Fore.RESET}")
mod_manager.check_for_updates()
available_updates = sum(1 for x in filter(lambda x: x.is_out_of_date(), mod_manager.mods()))
if available_updates == 0:
    print(f"{colorama.Fore.GREEN}All enabled mods up-to-date.{colorama.Fore.RESET}")
else:
    print(f"{colorama.Fore.YELLOW}{available_updates} mods have updates available.{colorama.Fore.RESET}")

options = [
    ("Install new mods", menu_install),
    ("Manage existing mods", menu_manage),
    ("Exit", menu_exit)
]

while True:
    root_menu = TerminalMenu(x[0] for x in options)
    sel = root_menu.show()
    if 0 <= sel < len(options):
        options[sel][1](mod_manager)